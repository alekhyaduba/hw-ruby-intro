
Ruby intro part 1
  #sum
    should be defined
    returns correct sum [20 points]
    works on the empty array [10 points]
  #max_2_sum
    should be defined
    returns the correct sum [7 points] (FAILED - 1)
    works even if 2 largest values are the same [3 points] (FAILED - 2)
    returns zero if array is empty [10 points] (FAILED - 3)
    returns value of the element if just one element [10 points] (FAILED - 4)
  #sum_to_n
    should be defined
    returns true when any two elements sum to the second argument [30 points] (FAILED - 5)
    returns false for any single element array [5 points] (FAILED - 6)
    returns false for an empty array [5 points] (FAILED - 7)

#hello
  should be defined
  The hello method returns the correct string [30 points] (FAILED - 8)

#starts_with_consonant?
  should be defined
  classifies true cases [10 points] (FAILED - 9)
  classifies false cases [10 points]
  works on the empty string [5 points]
  works on nonletters [5 points]

#binary_multiple_of_4?
  should be defined
  classifies valid binary numbers [30 points] (FAILED - 10)
  rejects invalid binary numbers [10 points]

BookInStock
  should be defined
  getters and setters
    should set ISBN [10 points] (FAILED - 11)
    should set price [10 points] (FAILED - 12)
    should be able to change ISBN [10 points] (FAILED - 13)
    should be able to change price [10 points] (FAILED - 14)
  constructor
    should reject invalid ISBN number [10 points]
    should reject zero price [10 points]
    should reject negative price [10 points]
  #price_as_string
    should be defined (FAILED - 15)
    should display 33.95 as "$33.95" [10 points] (FAILED - 16)
    should display 1.1 as $1.10 [10 points] (FAILED - 17)
    should display 20 as $20.00 [10 points] (FAILED - 18)

Failures:

  1) Ruby intro part 1 #max_2_sum returns the correct sum [7 points]
     Failure/Error: expect(max_2_sum([1, 2, 3, 4, 5])).to be_a_kind_of Integer
       expected nil to be a kind of Integer
     # ./spec/part1_spec.rb:29:in `block (3 levels) in <top (required)>'

  2) Ruby intro part 1 #max_2_sum works even if 2 largest values are the same [3 points]
     Failure/Error: expect(max_2_sum([1, 2, 3, 3])).to eq(6)

       expected: 6
            got: nil

       (compared using ==)
     # ./spec/part1_spec.rb:33:in `block (3 levels) in <top (required)>'

  3) Ruby intro part 1 #max_2_sum returns zero if array is empty [10 points]
     Failure/Error: expect(max_2_sum([])).to be_zero
       expected nil to respond to `zero?`
     # ./spec/part1_spec.rb:36:in `block (3 levels) in <top (required)>'

  4) Ruby intro part 1 #max_2_sum returns value of the element if just one element [10 points]
     Failure/Error: expect(max_2_sum([3])).to eq(3)

       expected: 3
            got: nil

       (compared using ==)
     # ./spec/part1_spec.rb:39:in `block (3 levels) in <top (required)>'

  5) Ruby intro part 1 #sum_to_n returns true when any two elements sum to the second argument [30 points]
     Failure/Error: expect(sum_to_n?([1, 2, 3, 4, 5], 5)).to be true # 2 + 3 = 5

       expected true
            got nil
     # ./spec/part1_spec.rb:48:in `block (3 levels) in <top (required)>'

  6) Ruby intro part 1 #sum_to_n returns false for any single element array [5 points]
     Failure/Error: expect(sum_to_n?([0], 0)).to be false

       expected false
            got nil
     # ./spec/part1_spec.rb:55:in `block (3 levels) in <top (required)>'

  7) Ruby intro part 1 #sum_to_n returns false for an empty array [5 points]
     Failure/Error: expect(sum_to_n?([], 0)).to be false

       expected false
            got nil
     # ./spec/part1_spec.rb:61:in `block (3 levels) in <top (required)>'

  8) #hello The hello method returns the correct string [30 points]
     Failure/Error: expect(hello('Dan').class).to eq(String)

       expected: String
            got: NilClass

       (compared using ==)

       Diff:
       @@ -1,2 +1,2 @@
       -String
       +NilClass
     # ./spec/part2_spec.rb:11:in `block (2 levels) in <top (required)>'

  9) #starts_with_consonant? classifies true cases [10 points]
     Failure/Error: expect(starts_with_consonant?('v')).to be_truthy, "'v' is a consonant"
       'v' is a consonant
     # ./spec/part2_spec.rb:23:in `block (2 levels) in <top (required)>'

  10) #binary_multiple_of_4? classifies valid binary numbers [30 points]
      Failure/Error: expect(binary_multiple_of_4?(string)).to be_truthy,  "Incorrect results for input: \"#{string}\""
        Incorrect results for input: "1010101010100"
      # ./spec/part2_spec.rb:48:in `block (3 levels) in <top (required)>'
      # ./spec/part2_spec.rb:47:in `each'
      # ./spec/part2_spec.rb:47:in `block (2 levels) in <top (required)>'

  11) BookInStock getters and setters should set ISBN [10 points]
      Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:11:in `initialize'
      # ./spec/part3_spec.rb:11:in `new'
      # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  12) BookInStock getters and setters should set price [10 points]
      Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:11:in `initialize'
      # ./spec/part3_spec.rb:11:in `new'
      # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  13) BookInStock getters and setters should be able to change ISBN [10 points]
      Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:11:in `initialize'
      # ./spec/part3_spec.rb:11:in `new'
      # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  14) BookInStock getters and setters should be able to change price [10 points]
      Failure/Error: before(:each)  { @book = BookInStock.new('isbn1', 33.8) }

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:11:in `initialize'
      # ./spec/part3_spec.rb:11:in `new'
      # ./spec/part3_spec.rb:11:in `block (3 levels) in <top (required)>'

  15) BookInStock #price_as_string should be defined
      Failure/Error: expect(BookInStock.new('isbn1', 10)).to respond_to(:price_as_string)

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:40:in `initialize'
      # ./spec/part3_spec.rb:40:in `new'
      # ./spec/part3_spec.rb:40:in `block (3 levels) in <top (required)>'

  16) BookInStock #price_as_string should display 33.95 as "$33.95" [10 points]
      Failure/Error: expect(BookInStock.new('isbn11', 33.95).price_as_string).to eq('$33.95')

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:43:in `initialize'
      # ./spec/part3_spec.rb:43:in `new'
      # ./spec/part3_spec.rb:43:in `block (3 levels) in <top (required)>'

  17) BookInStock #price_as_string should display 1.1 as $1.10 [10 points]
      Failure/Error: expect(BookInStock.new('isbn11', 1.1).price_as_string).to eq('$1.10')

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:46:in `initialize'
      # ./spec/part3_spec.rb:46:in `new'
      # ./spec/part3_spec.rb:46:in `block (3 levels) in <top (required)>'

  18) BookInStock #price_as_string should display 20 as $20.00 [10 points]
      Failure/Error: expect(BookInStock.new('isbn11', 20).price_as_string).to eq('$20.00')

      ArgumentError:
        wrong number of arguments (given 2, expected 0)
      # ./spec/part3_spec.rb:49:in `initialize'
      # ./spec/part3_spec.rb:49:in `new'
      # ./spec/part3_spec.rb:49:in `block (3 levels) in <top (required)>'

Finished in 0.04338 seconds (files took 0.0963 seconds to load)
34 examples, 18 failures

Failed examples:

rspec ./spec/part1_spec.rb:28 # Ruby intro part 1 #max_2_sum returns the correct sum [7 points]
rspec ./spec/part1_spec.rb:32 # Ruby intro part 1 #max_2_sum works even if 2 largest values are the same [3 points]
rspec ./spec/part1_spec.rb:35 # Ruby intro part 1 #max_2_sum returns zero if array is empty [10 points]
rspec ./spec/part1_spec.rb:38 # Ruby intro part 1 #max_2_sum returns value of the element if just one element [10 points]
rspec ./spec/part1_spec.rb:47 # Ruby intro part 1 #sum_to_n returns true when any two elements sum to the second argument [30 points]
rspec ./spec/part1_spec.rb:54 # Ruby intro part 1 #sum_to_n returns false for any single element array [5 points]
rspec ./spec/part1_spec.rb:60 # Ruby intro part 1 #sum_to_n returns false for an empty array [5 points]
rspec ./spec/part2_spec.rb:10 # #hello The hello method returns the correct string [30 points]
rspec ./spec/part2_spec.rb:22 # #starts_with_consonant? classifies true cases [10 points]
rspec ./spec/part2_spec.rb:46 # #binary_multiple_of_4? classifies valid binary numbers [30 points]
rspec ./spec/part3_spec.rb:12 # BookInStock getters and setters should set ISBN [10 points]
rspec ./spec/part3_spec.rb:15 # BookInStock getters and setters should set price [10 points]
rspec ./spec/part3_spec.rb:18 # BookInStock getters and setters should be able to change ISBN [10 points]
rspec ./spec/part3_spec.rb:22 # BookInStock getters and setters should be able to change price [10 points]
rspec ./spec/part3_spec.rb:39 # BookInStock #price_as_string should be defined
rspec ./spec/part3_spec.rb:42 # BookInStock #price_as_string should display 33.95 as "$33.95" [10 points]
rspec ./spec/part3_spec.rb:45 # BookInStock #price_as_string should display 1.1 as $1.10 [10 points]
rspec ./spec/part3_spec.rb:48 # BookInStock #price_as_string should display 20 as $20.00 [10 points]

